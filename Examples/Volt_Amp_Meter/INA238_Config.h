/* ============================================
  Simple_INA238 device library code is placed under the MIT license
  Copyright (c) 2024 Homer Creutz

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  ===============================================
*/

/*********************************************************************************
 ********************************* INA-238 30Amp *********************************
 *
 *  Configuration file
 *  The INA-238 30Amp can easily handle 30 amps continuous as the limiting component is
 *  the terminal block soldered to the PCB. The resistor is rated at 10 watts with an
 *  ultra-low resistance of 0.002 ohms, allowing the resistor to handle a total current
 *  of about 70.71 amps.
 *  The ADC chip can measure a ±163.84 mV ADC full scale range of the shunt voltage drop
 *  and can handle a voltage spike across the shunt resistor of 40 volts. This provides a
 *  maximum readable current of 81.92 amps.
 *  Replacing the terminal block and directly soldering the wires to the PCB could
 *  dramatically increase your available continuous current up to 70.71 amps,
 *  which is the limit of the resistor. The PCB, however, may not tolerate this
 *  level of current, which I plan on testing over the next few months.
 *
 *  The Simple_INA238 Library is required for this configuration file as well as the
 *  Simple_Wire library.
 *
 */

 #include <Wire.h>
 #include "Simple_INA238.h"
 #include "INA238_RW_Macros.h"
 
 // You can pick the name of the class you would like to use in your program.
 #define VA_Meter VA_Meter // Name of the Class
 
 // ESP32 Connection options:
 #define SDA_PIN 14 // I am using an ESP32 and chose GPIO pin 14 for the I2C SDA connection
 #define SCL_PIN 15 // I am using an ESP32 and chose GPIO pin 15 for the I2C SCL connection
 
 // Connect the alert pin to this input
 //#define AlertPin 13
 
 // Arduino UNO i2c pins
 // #define SDA_PIN A4 // If you are using an Arduino UNO connect A4 for the I2C SDA connection
 // #define SCL_PIN A5 // If you are using an Arduino UNO connect A5 for the I2C SCL connection
 
 /*
  On the back of the PCB there are a series of bridgeable jumpers. By cutting the existing jumper
  and bridging another with solder, you can change the address to one of the following 16 options:
  A1  A0 Device Address
  GND GND 0X40 (Default)
  GND VS  0X41
  GND SDA 0X42
  GND SCL 0X43
  VS  GND  0X44
  VS  VS  0X45
  VS  SDA 0X46
  VS  SCL 0X47
  SDA GND 0X48
  SDA VS  0X49
  SDA SDA 0X4A
  SDA SCL 0X4B
  SCL SCL 0X4C
  GND VS  0X4D
  SCL SDA 0X4E
  SCL SCL 0X4F
 */
 
 #define INA238Address VA_Meter.SetAddressWithinRange(0x40, 0x4F).GetAddress() // finds the address on the I2C bus by scanning for the device
 // #define INA238Address 0X40 // Fixes the address
 
 #define Shunt_Resistor 0.002f // This is the value of the shunt resistor between the source and load of the INA-238 30Amp board
 #define MaxExpectedCurrent 30 // This is used to calculate many of the values including sensitivity. Set this to the maximum expected current during normal operations of the monitored device.
 
 /*
  The INA238 has two conversion modes—continuous and triggered.
  In continuous-conversion mode, the INA238 will continuously convert the input measurements
  and update the output registers in an indefinite loop. In triggered-conversion mode,
  the INA238 will convert the input measurements, after which the ADC will go into shutdown mode
  until another single-shot trigger is generated by writing to the MODE Register.
  Writing the MODE Register will interrupt and restart triggered or continuous conversions that are in progress.
  The device can be read at any time, and the data from the last conversion remains available.
  The OnConversionReadyCallback function is triggered when the conversions are complete.
  To set the OnConversionReadyCallback function, you can place the following in your startup function.
  */
 
 // #define ina238_mode  INA238_Mode
 // #define ina238_mode  ADC_CONFIG_MODE_SHUTDOWN                                               // Shutdown
 // #define ina238_mode  ADC_CONFIG_MODE_TRIGGERED_BUS_VOLTAGE_SINGLE_SHOT                      // Triggered bus voltage, single shot
 // #define ina238_mode  ADC_CONFIG_MODE_TRIGGERED_SHUNT_VOLTAGE_SINGLE_SHOT                    // Triggered shunt voltage, single shot
 // #define ina238_mode  ADC_CONFIG_MODE_TRIGGERED_SHUNT_AND_BUS_VOLTAGE_SINGLE_SHOT            // Triggered shunt voltage and bus voltage, single shot
 // #define ina238_mode  ADC_CONFIG_MODE_TRIGGERED_TEMPERATURE_SINGLE_SHOT                      // Triggered temperature, single shot
 // #define ina238_mode  ADC_CONFIG_MODE_TRIGGERED_TEMPERATURE_AND_BUS_VOLTAGE_SINGLE_SHOT      // Triggered temperature and bus voltage, single shot
 // #define ina238_mode  ADC_CONFIG_MODE_TRIGGERED_TEMPERATURE_AND_SHUNT_VOLTAGE_SINGLE_SHOT    // Triggered temperature and shunt voltage, single shot
 // #define ina238_mode  ADC_CONFIG_MODE_TRIGGERED_ALL_SINGLE_SHOT                              // Triggered bus voltage, shunt voltage and temperature, single shot
 // #define ina238_mode  ADC_CONFIG_MODE_SHUTDOWN_ALT                                           // Shutdown (alternate value)
 // #define ina238_mode  ADC_CONFIG_MODE_CONTINUOUS_BUS_VOLTAGE_ONLY                            // Continuous bus voltage only
 // #define ina238_mode  ADC_CONFIG_MODE_CONTINUOUS_SHUNT_VOLTAGE_ONLY                          // Continuous shunt voltage only
  #define ina238_mode  ADC_CONFIG_MODE_CONTINUOUS_SHUNT_AND_BUS_VOLTAGE                       // Continuous shunt and bus voltage
 // #define ina238_mode  ADC_CONFIG_MODE_CONTINUOUS_TEMPERATURE_ONLY                            // Continuous temperature only
 // #define ina238_mode  ADC_CONFIG_MODE_CONTINUOUS_BUS_VOLTAGE_AND_TEMPERATURE                 // Continuous bus voltage and temperature
 // #define ina238_mode  ADC_CONFIG_MODE_CONTINUOUS_TEMPERATURE_AND_SHUNT_VOLTAGE               // Continuous temperature and shunt voltage
 // #define ina238_mode ADC_CONFIG_MODE_CONTINUOUS_ALL // Continuous bus voltage, shunt voltage and temperature (Default)
 
 // Conversion time for bus voltage measurement.
 // #define adc_config_vbus_conversion_time ADC_CONFIG_VBUSCT_50us    // 50 µs
 // #define adc_config_vbus_conversion_time ADC_CONFIG_VBUSCT_84us    // 84 µs
 // #define adc_config_vbus_conversion_time ADC_CONFIG_VBUSCT_150us   // 150 µs
 // #define adc_config_vbus_conversion_time ADC_CONFIG_VBUSCT_280us   // 280 µs
 // #define adc_config_vbus_conversion_time ADC_CONFIG_VBUSCT_540us   // 540 µs
 #define adc_config_vbus_conversion_time ADC_CONFIG_VBUSCT_1052us // 1052 µs (default)
 // #define adc_config_vbus_conversion_time ADC_CONFIG_VBUSCT_2074us  // 2074 µs
 // #define adc_config_vbus_conversion_time ADC_CONFIG_VBUSCT_4120us  // 4120 µs
 
 // Conversion time for shunt voltage measurement.
 // #define adc_config_vshunt_conversion_time ADC_CONFIG_VSHCT_50us     // 50 µs
 // #define adc_config_vshunt_conversion_time ADC_CONFIG_VSHCT_84us     // 84 µs
 // #define adc_config_vshunt_conversion_time ADC_CONFIG_VSHCT_150us    // 150 µs
 // #define adc_config_vshunt_conversion_time ADC_CONFIG_VSHCT_280us    // 280 µs
 // #define adc_config_vshunt_conversion_time ADC_CONFIG_VSHCT_540us    // 540 µs
 #define adc_config_vshunt_conversion_time ADC_CONFIG_VSHCT_1052us // 1052 µs (default)
 // #define adc_config_vshunt_conversion_time ADC_CONFIG_VSHCT_2074us   // 2074 µs
 // #define adc_config_vshunt_conversion_time ADC_CONFIG_VSHCT_4120us   // 4120 µs
 
 // Conversion time for temperature measurement.
 // #define adc_config_temperature_conversion_time ADC_CONFIG_VTCT_50us      // 50 µs
 // #define adc_config_temperature_conversion_time ADC_CONFIG_VTCT_84us      // 84 µs
 // #define adc_config_temperature_conversion_time ADC_CONFIG_VTCT_150us     // 150 µs
 // #define adc_config_temperature_conversion_time ADC_CONFIG_VTCT_280us     // 280 µs
 // #define adc_config_temperature_conversion_time ADC_CONFIG_VTCT_540us     // 540 µs
 #define adc_config_temperature_conversion_time ADC_CONFIG_VTCT_1052us // 1052 µs (default)
 // #define adc_config_temperature_conversion_time ADC_CONFIG_VTCT_2074us    // 2074 µs
 // #define adc_config_temperature_conversion_time ADC_CONFIG_VTCT_4120us    // 4120 µs
 
 // ADC sample averaging count.
 // #define adc_config_averaging_count ADC_CONFIG_AVG_1 // 1 sample (default)
 // #define adc_config_averaging_count ADC_CONFIG_AVG_4          // 4 samples
 // #define adc_config_averaging_count ADC_CONFIG_AVG_16         // 16 samples
 // #define adc_config_averaging_count ADC_CONFIG_AVG_64         // 64 samples
 // #define adc_config_averaging_count ADC_CONFIG_AVG_128        // 128 samples
 // #define adc_config_averaging_count ADC_CONFIG_AVG_256        // 256 samples
 // #define adc_config_averaging_count ADC_CONFIG_AVG_512        // 512 samples
 #define adc_config_averaging_count ADC_CONFIG_AVG_1024       // 1024 samples
 
 // Slow Alert
 // When the Slow Alert is enabled, it uses the averaged values to test the limits to trigger an alarm.
 // When Slow Alert is disabled, it uses the instantaneous value to test the limits to trigger an alarm.
 // Slow Alert Available Modes:
 //   Averaging = true
 //   Non-Averaging = false
 #define UseAveragingToAlert false
 
 // These are the setpoints to trigger an alarm event.
 #define TempOverLimitCelsius 40 // in °C
 // or
 // #define TempOverLimitFahrenheit 104 // in °F
 
 #define OverCurrentLimit 10.5  // Amps
 #define UnderCurrentLimit 1.2  // Amps
 #define OverVoltageLimit 15.5  // Volts
 #define UnderVoltageLimit 11.2 // Volts
 #define OverPowerLimit 100.1   // Watts
 
 // The following control the function of the out pin labeled Alert.
 // Alert Latch Available Modes:
 //   Transparent Mode = false
 //   Latch Mode = true
 // When the Alert Latch Enable bit is set to Transparent mode,
 // the Alert pin and flag bit reset to the idle state when the fault has been cleared.
 // When the Alert Latch Enable bit is set to Latch mode, the Alert pin and alert flag
 // remain active following a fault until the DIAG_ALRT register has been read.
 #define AlertLatchEnable true
 
 // Conversion Ready
 // Conversion Ready Available Modes:
 //   Disabled = false
 //   Enabled = true
 // The alert pin will be triggered when the conversion ready alert is activated,
 // indicating that a conversion cycle has completed.
 #define ConversionReadyEnable true
 
 // Alert Pin Polarity
 // Modes:
 //   Normal (Active-low, open-drain) = false
 //   Inverted (Active-high, open-drain) = true
 #define AlertPinPolarity false
 
 Simple_INA238 VA_Meter;
 bool AlertInterruptEnabled = false;
 bool AlertTriggered = false;
 
 void AlertPinTriggered(){
     AlertTriggered = true;
 }
 
 void Simple_INA238_Config()
 {
     VA_Meter.begin(SDA_PIN, SCL_PIN);
     VA_Meter.SetAddress(INA238Address);
     if (VA_Meter.Check_Address(VA_Meter.GetAddress()))
     {
         if (!VA_Meter.TestConnection(true))
         {
             // Handle connection failure if necessary.
         }
     }
     float ShuntResistor = 0.002f; // matches the attache resistor on the INA-238 30Amp
     float MaximumExpectedCurrent = 30.0f;
     VA_Meter.Reset();
     VA_Meter.CalculateShuntCal(ShuntResistor, MaximumExpectedCurrent);
     VA_Meter.ADC_Config_CT(adc_config_vbus_conversion_time, adc_config_vshunt_conversion_time, adc_config_temperature_conversion_time); // Shortest time configuration
     VA_Meter.ADC_Config_AVG(adc_config_averaging_count);
 #ifdef OverVoltageLimit
     VA_Meter.SetBusOverVoltageThreshold(OverVoltageLimit); // Bus over-limit alarm setpoint
 #endif
 
 #ifdef UnderVoltageLimit
     VA_Meter.SetBusUnderVoltageThreshold(UnderVoltageLimit); // Bus under-limit alarm setpoint
 #endif
 
 #ifdef OverCurrentLimit
     VA_Meter.SetShuntOverCurrentThreshold(OverCurrentLimit);
 #endif
 
 #ifdef UnderCurrentLimit
     VA_Meter.SetShuntUnderCurrentThreshold(UnderCurrentLimit);
 #endif
 
 #ifdef OverPowerLimit
     VA_Meter.SetPowerThreshold(OverPowerLimit); // Power over-limit alarm setpoint
 #endif
 
 #ifdef TempOverLimitCelsius
     VA_Meter.SetTemperatureThresholdCelsius(TempOverLimitCelsius);
 #endif
 
 #ifdef TempOverLimitFahrenheit
     VA_Meter.SetTemperatureThresholdFahrenheit(TempOverLimitFahrenheit);
 #endif
 
     VA_Meter.DIAG_Alert_Latch(AlertLatchEnable);
     VA_Meter.DIAG_Alert_Conversion_Ready_Flag(ConversionReadyEnable);
     VA_Meter.DIAG_Alert_Use_Averaged_Value(UseAveragingToAlert);
     VA_Meter.DIAG_Alert_Pin_Polarity(AlertPinPolarity);
     VA_Meter.ADC_CONFIG_MODE(ina238_mode);
 #ifdef AlertPin
     AlertInterruptEnabled = true;
     pinMode(AlertPin, INPUT_PULLUP);
     // Attach the interrupt to pin 13.
     // Trigger on falling edge (change this to RISING or CHANGE if needed).
     attachInterrupt(digitalPinToInterrupt(AlertPin), AlertPinTriggered, FALLING);
 #endif
 }
 